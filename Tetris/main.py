import random, time, os
from pynput.keyboard import Key, Listener
import pygame
#import graphic as sc
import math

class Brick:
    def __init__(self):
        self.Rotation = 0
        self.color = 0
        self.fig = [[0,0],[0,0],[0,0],[0,0]]
        self.clone = 0
        self.figID = 0
        self.v = 0
        self.delta = 0
        self.wait = 0.15
        self.FPS = 6

        self.fill()
    def fill(self):
        #Перший eлемент -- лівий іерхній край фігури!!
        figID = random.randint(0,4)
        if figID == 0:
            self.fig = [[[-3,4],[-2,4],[-1,4],[-1,5]],
                        [[-2,3],[-2,4],[-2,5],[-1,3]],
                        [[-3,3],[-3,4],[-2,4],[-1,4]],
                        [[-1,3],[-1,4],[-1,5],[-2,5]]]
        elif figID == 1:
            self.fig = [[[-3,4],[-2,4],[-1,4],[-1,3]],
                        [[-1,3],[-1,4],[-1,5],[-2,3]],
                        [[-3,4],[-3,3],[-2,3],[-1,3]],
                        [[-2,3],[-2,4],[-2,5],[-1,5]]]
        elif figID == 2:
            self.fig = [[[-2,4],[-2,5],[-1,5],[-1,6]],
                        [[-2,4],[-2,5],[-3,5],[-1,4]],
                        [[-2,4],[-2,5],[-1,5],[-1,6]],
                        [[-2,4],[-2,5],[-3,5],[-1,4]]]
        elif figID == 3:
            self.fig = [[[-2,5],[-2,6],[-1,4],[-1,5]],
                        [[-3,4],[-2,4],[-2,5],[-1,5]],
                        [[-2,5],[-2,6],[-1,4],[-1,5]],
                        [[-3,4],[-2,4],[-2,5],[-1,5]]]
        elif figID == 4:
            self.fig = [[[-2,4],[-2,5],[-1,4],[-1,5]],
                        [[-2,4],[-2,5],[-1,4],[-1,5]],
                        [[-2,4],[-2,5],[-1,4],[-1,5]],
                        [[-2,4],[-2,5],[-1,4],[-1,5]]]
            
        elif figID == 5:
            self.fig = [[[-2,4],[-2,5],[-2,6],[-1,5]],
                        [[-2,4],[-2,5],[-3,5],[-1,5]],
                        [[-1,4],[-1,5],[-1,6],[-2,5]],
                        [[-3,4],[-2,4],[-1,4],[-2,5]]]
            

    def Copy(self, arr, x, y, z, a):    #Функція копіювання списків
        qq = [["..","..","..","..","..","..","..","..","..",".."],
            ["..","..","..","..","..","..","..","..","..",".."],
            ["..","..","..","..","..","..","..","..","..",".."],
            ["..","..","..","..","..","..","..","..","..",".."],
            ["..","..","..","..","..","..","..","..","..",".."],
            ["..","..","..","..","..","..","..","..","..",".."],
            ["..","..","..","..","..","..","..","..","..",".."],
            ["..","..","..","..","..","..","..","..","..",".."],
            ["..","..","..","..","..","..","..","..","..",".."],
            ["..","..","..","..","..","..","..","..","..",".."],
            ["..","..","..","..","..","..","..","..","..",".."],
            ["..","..","..","..","..","..","..","..","..",".."],
            ["..","..","..","..","..","..","..","..","..",".."],
            ["..","..","..","..","..","..","..","..","..",".."],
            ["..","..","..","..","..","..","..","..","..",".."],
            ["..","..","..","..","..","..","..","..","..",".."],
            ["..","..","..","..","..","..","..","..","..",".."]]

        qqq = [[[-2,4],[-2,5],[-2,6],[-1,5]],
                            [[-2,4],[-2,5],[-3,5],[-1,5]],
                            [[-1,4],[-1,5],[-1,6],[-2,5]],
                            [[-3,4],[-2,4],[-1,4],[-2,5]]]
        if a == 1:
            for i in range(x):
                for j in range(y):
                    for q in range(z):
                        qqq[i][j][q] = arr[i][j][q]
            return qqq
        else:
            for i in range(x):
                for j in range(y):
                    qq[i][j] = arr[i][j]
            return qq
    
    



field = [["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."]]

static= [["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."],
         ["..","..","..","..","..","..","..","..","..",".."]]


def Fall ( Tetramino, field, static):
        
        field= Tetramino.Copy(static, 17, 10,"foo", 0)
        for i in range(4):
            for j in range(4):
                Tetramino.fig[j][i][0] += 1
        for i in range(3, -1, -1):
            if Tetramino.fig[Tetramino.Rotation][i][0] >= 0:
                field[Tetramino.fig[Tetramino.Rotation][i][0]][Tetramino.fig[Tetramino.Rotation][i][1]] = "[]"
        
            else:   
                pass

        return field


def move(key):
    k = 0
    KeY = 0
    if key is None:
        pass
    elif key == Key.right:
        field= Tetramino.Copy(static, 17, 10,"foo", 0)
        for j in range(4):
            for i in range(4):
                Tetramino.fig[j][i][1]+=1
                field[Tetramino.fig[Tetramino.Rotation][i][0]][Tetramino.fig[Tetramino.Rotation][i][1]] = "[]"
    elif key == Key.left :
        field= Tetramino.Copy(static, 17, 10,"foo", 0)
        for j in range(4):
            for i in range(4):
                Tetramino.fig[j][i][1]-=1
                field[Tetramino.fig[Tetramino.Rotation][i][0]][Tetramino.fig[Tetramino.Rotation][i][1]] = "[]"
    elif key == Key.up:
        Tetramino.Rotation = (Tetramino.Rotation + 1)%4   #!!
    elif key == Key.esc:
        os.abort()

    
    

def Check(Tetramino,static):
    try:
        for i in range (4):
            n = 1
            if Tetramino.fig[Tetramino.Rotation][i][0]+1 >16:
                return False
            
            if Tetramino.fig[Tetramino.Rotation][i][0]+1 < 0:
                while Tetramino.fig[Tetramino.Rotation][i][0]+n != 0:
                    n+=1                                        

            if static[Tetramino.fig[Tetramino.Rotation][i][0]+n][Tetramino.fig[Tetramino.Rotation][i][1]] =="[]":
                raise IndexError
        return True
                     
    except IndexError:
        
        return False

def clear(field):
    for i in range(17):
        n = 0
        for j in range(10):
            if field[i][j] == "..":
                break
            else:
                n+=1
    
        if n==10:
            for q in range (10):
                        field[i][q] = ".."
    return field

    

listener = Listener(on_press=move, on_release=None)
listener.start()
while True:
    Tetramino = Brick()
    move(Tetramino)
    while True:
        a = time.time()
        InAir = Check(Tetramino,static)
        if InAir == False:
            field = clear(field)
            static= Tetramino.Copy(field, 17, 10,"foo", 0)
            break
        
        field = Fall( Tetramino, field, static)    
        time.sleep(math.fabs(1/Tetramino.FPS))     #delta = 0, на кадр віддається в два рази більше часу
        os.system("color 2")
        os.system("cls")
        for i in range(17):
                print(field[i], sep="\n")
        print(time.time()-a)
        
    
    